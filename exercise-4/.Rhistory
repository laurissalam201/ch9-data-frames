# Exercise 2: working with data frames
# Create a vector of 100 employees ("Employee 1", "Employee 2", ... "Employee 100")
# Hint: use the `paste()` function and vector recycling to add a number to the word
# "Employee"
employees <- paste("Employee", 1:100)
# Create a vector of 100 random salaries for the year 2017
# Use the `runif()` function to pick random numbers between 40000 and 50000
random_salaries_2017 <- runif(100, 40000, 50000)
# Create a vector of 100 salaries in 2018 that have changed from 2017
# Use `runif()` to add a random number between -5000 and 10000 to each of 2017's
# salaries (the negative number means that a salary may have decreased!)
random_salaries_2018 <- random_salaries_2017 + runif(100, -5000, 10000)
# Create a data frame 'salaries' by combining the 3 vectors you just made
# Remember to set `stringsAsFactors=FALSE`!
salaries <- data.frame(employees, random_salaries_2017, random_salaries_2018, stringsAsFactors=FALSE)
# Create a column 'change' that stores each person's change in salary between
# 2017 and 2018
salaries$change <- random_salaries_2018 - random_salaries_2017
# Create a column 'got_raise' that is TRUE if the person got a raise (their
# salary went up)
salaries$got_raise <- salaries$change > 0
### Retrieve values from your data frame to answer the following questions
### Note that you should get the value as specific as possible (e.g., a single
### cell rather than the whole row!)
# What was the 2018 salary of employee 57
# How many employees got a raise?
# What was the dollar value of the highest raise?
# What was the "name" of the employee who received the highest raise?
# What was the largest decrease in salaries between the two years?
# What was the name of the employee who recieved largest decrease in salary?
# What was the average salary change?
# For people who did not get a raise, how much money did they lose on average?
## Consider: do the above averages match what you expected them to be based on
## how you generated the salaries?
# Write a .csv file of your salary data to your working directory
# What was the average salary change?
avg_change <- mean(salaries$change)
?data
# Load R's "USPersonalExpenditure" dataset using the `data()` function
# This will produce a data frame called `USPersonalExpenditure`
data("USPersonalExpenditure")
# The variable `USPersonalExpenditure` is now accessible to you. Unfortunately,
# it's not a data frame (it's actually what is called a matrix)
# Test this using the `is.data.frame()` function
is.data.frame(data("USPersonalExpenditure"))
# Load R's "USPersonalExpenditure" dataset using the `data()` function
# This will produce a data frame called `USPersonalExpenditure`
USPersonalExpenditure <- data("USPersonalExpenditure")
# The variable `USPersonalExpenditure` is now accessible to you. Unfortunately,
# it's not a data frame (it's actually what is called a matrix)
# Test this using the `is.data.frame()` function
is.data.frame(USPersonalExpenditure)
# Luckily, you can pass the USPersonalExpenditure variable as an argument to the
# `data.frame()` function to convert it a data farm. Do this, storing the
# result in a new variable
data.frame(USPersonalExpenditure)
# Luckily, you can pass the USPersonalExpenditure variable as an argument to the
# `data.frame()` function to convert it a data farm. Do this, storing the
# result in a new variable
df <- data.frame(USPersonalExpenditure)
df
# What are the column names of your dataframe?
colnames(df)
# What are the row names of your dataframe?
rownames(df)
# Exercise 2: working with data frames
# Create a vector of 100 employees ("Employee 1", "Employee 2", ... "Employee 100")
# Hint: use the `paste()` function and vector recycling to add a number to the word
# "Employee"
employees <- paste("Employee", 1:100)
# Create a vector of 100 random salaries for the year 2017
# Use the `runif()` function to pick random numbers between 40000 and 50000
random_salaries_2017 <- runif(100, 40000, 50000)
# Create a vector of 100 salaries in 2018 that have changed from 2017
# Use `runif()` to add a random number between -5000 and 10000 to each of 2017's
# salaries (the negative number means that a salary may have decreased!)
random_salaries_2018 <- random_salaries_2017 + runif(100, -5000, 10000)
# Create a data frame 'salaries' by combining the 3 vectors you just made
# Remember to set `stringsAsFactors=FALSE`!
salaries <- data.frame(employees, random_salaries_2017, random_salaries_2018, stringsAsFactors=FALSE)
# Create a column 'change' that stores each person's change in salary between
# 2017 and 2018
salaries$change <- random_salaries_2018 - random_salaries_2017
# Create a column 'got_raise' that is TRUE if the person got a raise (their
# salary went up)
salaries$got_raise <- salaries$change > 0
### Retrieve values from your data frame to answer the following questions
### Note that you should get the value as specific as possible (e.g., a single
### cell rather than the whole row!)
# What was the 2018 salary of employee 57
# How many employees got a raise?
# What was the dollar value of the highest raise?
# What was the "name" of the employee who received the highest raise?
# What was the largest decrease in salaries between the two years?
# What was the name of the employee who recieved largest decrease in salary?
# What was the average salary change?
avg_change <- mean(salaries$change)
# For people who did not get a raise, how much money did they lose on average?
## Consider: do the above averages match what you expected them to be based on
## how you generated the salaries?
# Write a .csv file of your salary data to your working directory
salaries
salaries[5]
colnames(salaries)
# What was the 2018 salary of employee 57
salary_57 <- salaries[salaries$employees == "Employee 57", "random_salaries_2018"]
salary_57
# How many employees got a raise?
nrow(salaries$got_raise == "TRUE")
# How many employees got a raise?
nrow(salaries[salaries$got_raise == "TRUE", ])
# What was the dollar value of the highest raise?
max(salaries$change)
# What was the dollar value of the highest raise?
highest <- max(salaries$change)
# What was the dollar value of the highest raise?
highest_raise <- max(salaries$change)
# What was the "name" of the employee who received the highest raise?
salaries[salaries$change == highest_raise]
# What was the "name" of the employee who received the highest raise?
salaries[salaries$change == highest_raise, "employees"]
# What was the largest decrease in salaries between the two years?
largest_decrease <- min(salaries$change)
# What was the name of the employee who recieved largest decrease in salary?
salaries[salaries$change == largest_decrease, "employees"]
# For people who did not get a raise, how much money did they lose on average?
avg_loss <- mean(salaries$change[salaries$got_raise == "FALSE"])
avg_loss
# Write a .csv file of your salary data to your working directory
write.csv(salaries, 'salaries.csv')
# Add a column "category" to your data frame that contains the rownames
df$category <- rownames(df)
# Luckily, you can pass the USPersonalExpenditure variable as an argument to the
# `data.frame()` function to convert it a data farm. Do this, storing the
# result in a new variable
df <- data.frame(USPersonalExpenditure)
# What are the column names of your dataframe?
colnames(df)
# What are the row names of your dataframe?
rownames(df)
# Add a column "category" to your data frame that contains the rownames
df$category <- rownames(df)
# How much money was spent on personal care in 1940?
df["Personal Care", x1940]
# How much money was spent on personal care in 1940?
person_care <- df['Personal Care', 'x1940']
person_care
# Load R's "USPersonalExpenditure" dataset using the `data()` function
# This will produce a data frame called `USPersonalExpenditure`
data("USPersonalExpenditure")
# The variable `USPersonalExpenditure` is now accessible to you. Unfortunately,
# it's not a data frame (it's actually what is called a matrix)
# Test this using the `is.data.frame()` function
is.data.frame(USPersonalExpenditure)
# Luckily, you can pass the USPersonalExpenditure variable as an argument to the
# `data.frame()` function to convert it a data farm. Do this, storing the
# result in a new variable
df <- data.frame(USPersonalExpenditure)
# What are the column names of your dataframe?
colnames(df)
# What are the row names of your dataframe?
rownames(df)
# Add a column "category" to your data frame that contains the rownames
df$category <- rownames(df)
# How much money was spent on personal care in 1940?
person_care <- df['Personal Care', 'x1940']
person_care
view(df)
df
# How much money was spent on personal care in 1940?
person_care <- df['Personal Care', 'X1940']
person_care
# How much money was spent on Food and Tobacco in 1960?
food_tob <- df['Food and Tobacco', 'X1960']
food_tob
# What was the highest expenditure category in 1960?
highest_1960 <- df$category[df$X1960 == max(df$X1960)]
highest_1960
# Define a function `lowest_category` that takes in a year as a parameter, and
# returns the lowest spending category of that year
lowest_category <- function(year){
format <- paste0("X", year)
df$category[df$format == min(df$format)]
}
lowest_category(1960)
# Define a function `lowest_category` that takes in a year as a parameter, and
# returns the lowest spending category of that year
lowest_category <- function(year){
format <- paste0("X", year)
df$category[df[ , format] == min(df[, format])]
}
lowest_category(1960)
?sapply
# Using your function, determine the lowest spending category of each year
# Hint: use the `sapply()` function to apply your function to a vector of years
lowest_all <- sapply(seq(1940, 1960, 5), lowest_category)
loewst_all
lowest_all
# Use the `read.csv()` functoin to read the data from the `data/gates_money.csv`
# file into a variable called `grants` using the `read.csv()`
# Be sure to set your working directory in RStudio, and do NOT treat strings as
# factors!
read.csv(data/gates_money.csv)
setwd("C:/Users/lauri/Desktop/INFO201/ch9-data-frames/exercise-4")
# Use the `read.csv()` functoin to read the data from the `data/gates_money.csv`
# file into a variable called `grants` using the `read.csv()`
# Be sure to set your working directory in RStudio, and do NOT treat strings as
# factors!
read.csv(data/gates_money.csv)
# Use the `read.csv()` functoin to read the data from the `data/gates_money.csv`
# file into a variable called `grants` using the `read.csv()`
# Be sure to set your working directory in RStudio, and do NOT treat strings as
# factors!
grants <- read.csv(data/gates_money.csv, stringsAsFactors = FALSE)
# Use the `read.csv()` functoin to read the data from the `data/gates_money.csv`
# file into a variable called `grants` using the `read.csv()`
# Be sure to set your working directory in RStudio, and do NOT treat strings as
# factors!
grants <- read.csv('data/gates_money.csv', stringsAsFactors = FALSE)
# Use the View function to look at the loaded data
View(grants)
# Create a variable `organization` that contains the `organization` column of
# the dataset
organization <- grants$organization
organization
# Confirm that the "organization" column is a vector using the `is.vector()`
# function.
# This is a useful debugging tip if you hit errors later!
is.vector(organization)
colnames(grants)
# What was the mean grant value?
mean(grants$total_amount)
# What was the mean grant value?
mean_grant <- mean(grants$total_amount)
# What was the dollar amount of the largest grant?
max_grant <- max(grants$total_amount)
max_grant
# What was the dollar amount of the smallest grant?
min_grant <- min(grants$total_amount)
min_grant
# Which organization received the largest grant?
grants$organization[grants$total_amount == max_grant]
# Which organization received the largest grant?
largest_receiver <- grants$organization[grants$total_amount == max_grant]
# Which organization received the smallest grant?
smallest_receiver <- grants$organization[grants$total_amount == min_grant]
# How many grants were awarded in 2010?
length(grants$total_amount[grants$start_year == 2010])
